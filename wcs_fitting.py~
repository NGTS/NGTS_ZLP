# -*- coding: utf-8 -*-
import pyfits as pf
import os
import linecache
import threading
from os.path import isfile, join
from util import thread_alloc

def m_solve_images(nproc,nfiles,nice):

  starts, ends = thread_alloc(nfiles,nproc)

  threads = []
  for i in range(0,nproc):
    t = threading.Thread(target=solve_images, args = (starts[i],ends[i],i+1,nice))
    threads.append(t)
  [x.start() for x in threads]
  [x.join() for x in threads]

def solve_images(minlen,maxlen,thread,niced,status_update=True,thresh=100.0,resume=0):

  for i in range(minlen,maxlen):
    raw_image = linecache.getline('filelist',i).rstrip('\n')
    image = raw_image.split('/')[-1].strip('.fits') + '_cal.fits'
    percent = 100.0*((i+1)-minlen)/(maxlen-minlen)

    # resume function makes it easy to pick up where you left off in case of an error

    if (abs(percent) > resume):
      casu_solve(image,thread,niced,thresh)
      print 'Process ',thread,' is ',percent,'% complete'
      
      if status_update == True:
	f = open("filelist_notdone","r")
	lines = f.readlines()
	f.close()
	f = open("filelist_notdone","w")
	for line in lines:
	  if line!=raw_image+"\n":
	    f.write(line)
	f.close()

  linecache.clearcache()

def casu_solve(filename,thread,niced,thresh=100.0):
  from catmatch import *

  nice =''
  if niced==True:
    nice = '/usr/bin/nice -n20 '
  casuin = filename
  command = nice+'imcore '+casuin+' noconf outputcat'+str(thread)+'.fits 2 '+str(thresh)+' --noell'
  print command
  os.system(command)
  # quick correction factor because the central wcs axis is not always pointed in the right place at the central distortion axis
  shift_wcs_axis(casuin,'outputcat'+str(thread)+'.fits',thresh=thresh)

  command = nice +'wcsfit '+casuin+' outputcat'+str(thread)+'.fits --site cds'
  print command
  os.system(command)
  os.system('rm outputcat'+str(thread)+'.fits')