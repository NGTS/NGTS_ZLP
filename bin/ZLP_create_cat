#!/usr/local/python/bin/python
# -*- coding: utf-8 -*-

"""
 
Zero Level Pipeline catalog generation

Usage: 
  ZLP_create_cat [-h] [--verbose] [--nproc=NPROC] [--nfiles=NFILES] [--s_thresh=S_THRESH] [--c_thresh=C_THRESH] [--stacklist=STACKLIST] (--confmap=CONFMAP) (--filelist=FILELIST) [--outname=OUTNAME]

Options:
  -h --help              Show help text
  --verbose              Print more text
  --confmap=CONFMAP      The confidence map (callibration product)
  --filelist=FILELIST    Specify a filelist to use instead of command line
  --outname=OUTNAME      Specify the name of the output catalog [default: catfile.fits]
  --stacklist=STACKLIST  The name of the file that stores the names of the images used in the stack [default: stackfilelist]
  --nproc=NPROC          Enable multithreading if you're analysing a lot of files at once [default: 16]
  --c_thresh=C_THRESH    The detection threshold to use when defining the input [default: 2]
  --s_thresh=S_THRESH    The detection threshold to use when WCS solving images - typically higher than when doing actual photometry [default: 20]
  --nfiles=NFILES        Maximum number of files to use in the stack [default: 16]

This is the catalog generation tool, requires a filelist input. need to work on being selective on the files used in input.
 
"""

from docopt import docopt
import sys
import linecache
from numpy import *
import threading
from os.path import isfile, join
from NGTS_workpackage import *

arguments = docopt(__doc__)

if arguments['--verbose'] == True:
  print 'Creating source catalogue from first ',arguments['--nfiles'],' images...'

# for now we just pick the first n images, in future we might want to be more selective.
stacklist = open(arguments['--stacklist'],'w')
i = 0
for line in open(arguments['--filelist'],'r'):
    cal_stat = line.strip('\n').split(' ')[1]
    if cal_stat == 'ok':
      image = line.split(' ')[0]
      if i < int(arguments['--nfiles']):
        stacklist.write(image+'\n')
      i+=1
stacklist.close()

m_solve_images(arguments['--stacklist'],thresh=arguments['--s_thresh'],nproc=int(arguments['--nproc']),verbose=arguments['--verbose'])

command = 'casu_imstack @'+arguments['--stacklist']+' '+arguments['--confmap']+' "" outstack.fits outstackconf.fits'
if arguments['--verbose'] == True:
  print(command)
os.system(command)

command = 'imcore outstack.fits outstackconf.fits '+arguments['--outname']+' 2 '+arguments['--c_thresh'] + ' --filtfwhm=1'
if arguments['--verbose'] == True:
  print(command)
os.system(command)  

if arguments['--verbose'] == True:
  print 'Catalogue complete'
